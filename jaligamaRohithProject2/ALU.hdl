// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    //Code to output the final value of x which will be used for computation
    Mux16(a=x, b[0..15]=false, sel=zx, out=xORnot);      //Set x to 0 if zx=1
    Not16(in=xORnot, out=negxORnot);                     //Flip bits of xOR0
    Mux16(a=xORnot, b=negxORnot, sel=nx, out=xinput);      //Flip bits if nx=1


    //Code to output the final value of y which will be used for computation
    Mux16(a=y, b[0..15]=false, sel=zy, out=yOR0);      //Set y to 0 if zy=1
    Not16(in=yOR0, out=negyOR0);                       //Flip bits of yOR0
    Mux16(a=yOR0, b=negyOR0, sel=ny, out=yinput);      //Flip bits if nx=1

    And16(a=xinput, b=yinput, out=xANDy);
    Add16(a=xinput, b=yinput, out=xPLUSy);

    Mux16(a=xANDy, b=xPLUSy, sel=f, out=calcOut);    //And if f=0, add if f=1
    Not16(in=calcOut, out=negCalcOut);               //Negation of the output

    Mux16(a=calcOut, b=negCalcOut, sel=no,out= out, out[15]=ng, out[0..7]=output1, out[8..15]= output2); //Final output of the ALU
    
    /* output of the Mux16 is mapped to out. MSB of out is mapped to ng (if MSB ==1, number is negative). Had to map the two halves to different busses to compute zr
    because of an error "Sub bus of an internal node may not be used" */            

    //Code for zr
    Or8Way(in=output1, out=zr1);
    Or8Way(in=output2, out=zr2);
    Or(a=zr1, b=zr2, out=zrNOT);
    Not(in=zrNOT, out=zr);

}