// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:


    //Mux for input of address register
    Mux16(a=instruction, b=outMprev, sel=instruction[15], out=addressIn);

    //Load bit for address register
    Not(in=instruction[15], out= atIns);
    Or(a=atIns, b=instruction[5], out=Aload);

 	//Address Register
 	ARegister(in=addressIn, load=Aload, out=Aout, out[0..14]= addressM);			//addressM is a 15 bit field

 	//Load bit Data register
 	And(a=instruction[15], b=instruction[4], out=dload);

 	//Data register
 	DRegister(in=outMprev, load=dload, out=Dout);

 	//Mux for y input of the ALU
 	Mux16(a=Aout, b=inM, sel=instruction[12], out=yALU);

 	//ALU
 	ALU(x=Dout, y=yALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], 
 		f=instruction[7], no=instruction[6], out=outM, out= outMprev, zr=zr, ng=ng);

 	//Write M
 	And(a=instruction[3], b=instruction[15], out=writeM);


 	//Load bit for pc
 	//If jmp <
 	And(a=instruction[2], b=ng, out=negative);
 	And(a=negative, b=instruction[15], out=comp1);

 	//if jmp =
 	And(a=instruction[1], b=zr, out=iszero);
 	And(a=iszero, b=instruction[15], out=comp2);

 	//if jmp >
 	Or(a=zr, b=ng, out=zerOrneg);
 	Not(in=zerOrneg, out=positive);
 	
 	And(a=instruction[0], b=instruction[15], out=jmpConditions);
 	And(a=positive, b=jmpConditions, out=comp3);

 	//Checking if any one of the conditions is satisfied. Last 5 inputs false because the output depends on the first three inputs and [a or false= a]
 	Or8Way(in[7]=comp1, in[6]= comp2, in[5]= comp3, in[0..4]=false, out=pcload);

 	//PC
 	PC(in=Aout, load=pcload, inc=true, reset=reset, out[0..14]=pc);
}
